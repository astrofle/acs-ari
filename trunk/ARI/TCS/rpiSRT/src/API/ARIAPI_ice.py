# **********************************************************************
#
# Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `ARIAPI.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module ARIAPI
_M_ARIAPI = Ice.openModule('ARIAPI')
__name__ = 'ARIAPI'

if 'API' not in _M_ARIAPI.__dict__:
    _M_ARIAPI.API = Ice.createTempClass()
    class API(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_ARIAPI.API:
                raise RuntimeError('ARIAPI.API is an abstract class')

        def ice_ids(self, current=None):
            return ('::ARIAPI::API', '::Ice::Object')

        def ice_id(self, current=None):
            return '::ARIAPI::API'

        def ice_staticId():
            return '::ARIAPI::API'
        ice_staticId = staticmethod(ice_staticId)

        def sayHello(self, current=None):
            pass

        def testConn(self, s, current=None):
            pass

        def ChooseObservingMode(self, s1, s2, current=None):
            pass

        def Connect(self, current=None):
            pass

        def Initialize(self, current=None):
            pass

        def SetTarget(self, s1, s2, s3, current=None):
            pass

        def FindSources(self, current=None):
            pass

        def StartTracking(self, current=None):
            pass

        def StopTracking(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_ARIAPI._t_API)

        __repr__ = __str__

    _M_ARIAPI.APIPrx = Ice.createTempClass()
    class APIPrx(Ice.ObjectPrx):

        def sayHello(self, _ctx=None):
            return _M_ARIAPI.API._op_sayHello.invoke(self, ((), _ctx))

        def begin_sayHello(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_sayHello.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_sayHello(self, _r):
            return _M_ARIAPI.API._op_sayHello.end(self, _r)

        def testConn(self, s, _ctx=None):
            return _M_ARIAPI.API._op_testConn.invoke(self, ((s, ), _ctx))

        def begin_testConn(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_testConn.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_testConn(self, _r):
            return _M_ARIAPI.API._op_testConn.end(self, _r)

        def ChooseObservingMode(self, s1, s2, _ctx=None):
            return _M_ARIAPI.API._op_ChooseObservingMode.invoke(self, ((s1, s2), _ctx))

        def begin_ChooseObservingMode(self, s1, s2, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_ChooseObservingMode.begin(self, ((s1, s2), _response, _ex, _sent, _ctx))

        def end_ChooseObservingMode(self, _r):
            return _M_ARIAPI.API._op_ChooseObservingMode.end(self, _r)

        def Connect(self, _ctx=None):
            return _M_ARIAPI.API._op_Connect.invoke(self, ((), _ctx))

        def begin_Connect(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_Connect.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_Connect(self, _r):
            return _M_ARIAPI.API._op_Connect.end(self, _r)

        def Initialize(self, _ctx=None):
            return _M_ARIAPI.API._op_Initialize.invoke(self, ((), _ctx))

        def begin_Initialize(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_Initialize.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_Initialize(self, _r):
            return _M_ARIAPI.API._op_Initialize.end(self, _r)

        def SetTarget(self, s1, s2, s3, _ctx=None):
            return _M_ARIAPI.API._op_SetTarget.invoke(self, ((s1, s2, s3), _ctx))

        def begin_SetTarget(self, s1, s2, s3, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_SetTarget.begin(self, ((s1, s2, s3), _response, _ex, _sent, _ctx))

        def end_SetTarget(self, _r):
            return _M_ARIAPI.API._op_SetTarget.end(self, _r)

        def FindSources(self, _ctx=None):
            return _M_ARIAPI.API._op_FindSources.invoke(self, ((), _ctx))

        def begin_FindSources(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_FindSources.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_FindSources(self, _r):
            return _M_ARIAPI.API._op_FindSources.end(self, _r)

        def StartTracking(self, _ctx=None):
            return _M_ARIAPI.API._op_StartTracking.invoke(self, ((), _ctx))

        def begin_StartTracking(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_StartTracking.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_StartTracking(self, _r):
            return _M_ARIAPI.API._op_StartTracking.end(self, _r)

        def StopTracking(self, _ctx=None):
            return _M_ARIAPI.API._op_StopTracking.invoke(self, ((), _ctx))

        def begin_StopTracking(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ARIAPI.API._op_StopTracking.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_StopTracking(self, _r):
            return _M_ARIAPI.API._op_StopTracking.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_ARIAPI.APIPrx.ice_checkedCast(proxy, '::ARIAPI::API', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_ARIAPI.APIPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_ARIAPI._t_APIPrx = IcePy.defineProxy('::ARIAPI::API', APIPrx)

    _M_ARIAPI._t_API = IcePy.defineClass('::ARIAPI::API', API, -1, (), True, False, None, (), ())
    API._ice_type = _M_ARIAPI._t_API

    API._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    API._op_testConn = IcePy.Operation('testConn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), IcePy._t_string, False, 0),), None, ())
    API._op_ChooseObservingMode = IcePy.Operation('ChooseObservingMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_string, False, 0),), None, ())
    API._op_Connect = IcePy.Operation('Connect', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0),), None, ())
    API._op_Initialize = IcePy.Operation('Initialize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0),), None, ())
    API._op_SetTarget = IcePy.Operation('SetTarget', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_int, False, 0)), (((), IcePy._t_string, False, 0),), None, ())
    API._op_FindSources = IcePy.Operation('FindSources', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0),), None, ())
    API._op_StartTracking = IcePy.Operation('StartTracking', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0),), None, ())
    API._op_StopTracking = IcePy.Operation('StopTracking', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0),), None, ())

    _M_ARIAPI.API = API
    del API

    _M_ARIAPI.APIPrx = APIPrx
    del APIPrx

# End of module ARIAPI
