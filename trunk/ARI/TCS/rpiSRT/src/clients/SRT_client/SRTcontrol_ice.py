# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `SRTcontrol.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module SRTControl
_M_SRTControl = Ice.openModule('SRTControl')
__name__ = 'SRTControl'

if not _M_SRTControl.__dict__.has_key('_t_ports'):
    _M_SRTControl._t_ports = IcePy.defineSequence('::SRTControl::ports', (), IcePy._t_string)

if not _M_SRTControl.__dict__.has_key('_t_spectrum'):
    _M_SRTControl._t_spectrum = IcePy.defineSequence('::SRTControl::spectrum', (), IcePy._t_float)

if not _M_SRTControl.__dict__.has_key('AntennaStatus'):
    _M_SRTControl.AntennaStatus = Ice.createTempClass()
    class AntennaStatus(object):
        def __init__(self, now='', name='', az=0.0, el=0.0, aznow=0.0, elnow=0.0, axis=0, tostow=0, elatstow=0, azatstow=0, slew=0, serialport='', lastSRTCom='', lastSerialMsg=''):
            self.now = now
            self.name = name
            self.az = az
            self.el = el
            self.aznow = aznow
            self.elnow = elnow
            self.axis = axis
            self.tostow = tostow
            self.elatstow = elatstow
            self.azatstow = azatstow
            self.slew = slew
            self.serialport = serialport
            self.lastSRTCom = lastSRTCom
            self.lastSerialMsg = lastSerialMsg

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.now)
            _h = 5 * _h + __builtin__.hash(self.name)
            _h = 5 * _h + __builtin__.hash(self.az)
            _h = 5 * _h + __builtin__.hash(self.el)
            _h = 5 * _h + __builtin__.hash(self.aznow)
            _h = 5 * _h + __builtin__.hash(self.elnow)
            _h = 5 * _h + __builtin__.hash(self.axis)
            _h = 5 * _h + __builtin__.hash(self.tostow)
            _h = 5 * _h + __builtin__.hash(self.elatstow)
            _h = 5 * _h + __builtin__.hash(self.azatstow)
            _h = 5 * _h + __builtin__.hash(self.slew)
            _h = 5 * _h + __builtin__.hash(self.serialport)
            _h = 5 * _h + __builtin__.hash(self.lastSRTCom)
            _h = 5 * _h + __builtin__.hash(self.lastSerialMsg)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.now < other.now or self.name < other.name or self.az < other.az or self.el < other.el or self.aznow < other.aznow or self.elnow < other.elnow or self.axis < other.axis or self.tostow < other.tostow or self.elatstow < other.elatstow or self.azatstow < other.azatstow or self.slew < other.slew or self.serialport < other.serialport or self.lastSRTCom < other.lastSRTCom or self.lastSerialMsg < other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.now <= other.now or self.name <= other.name or self.az <= other.az or self.el <= other.el or self.aznow <= other.aznow or self.elnow <= other.elnow or self.axis <= other.axis or self.tostow <= other.tostow or self.elatstow <= other.elatstow or self.azatstow <= other.azatstow or self.slew <= other.slew or self.serialport <= other.serialport or self.lastSRTCom <= other.lastSRTCom or self.lastSerialMsg <= other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.now == other.now and self.name == other.name and self.az == other.az and self.el == other.el and self.aznow == other.aznow and self.elnow == other.elnow and self.axis == other.axis and self.tostow == other.tostow and self.elatstow == other.elatstow and self.azatstow == other.azatstow and self.slew == other.slew and self.serialport == other.serialport and self.lastSRTCom == other.lastSRTCom and self.lastSerialMsg == other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.now != other.now or self.name != other.name or self.az != other.az or self.el != other.el or self.aznow != other.aznow or self.elnow != other.elnow or self.axis != other.axis or self.tostow != other.tostow or self.elatstow != other.elatstow or self.azatstow != other.azatstow or self.slew != other.slew or self.serialport != other.serialport or self.lastSRTCom != other.lastSRTCom or self.lastSerialMsg != other.lastSerialMsg
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.now > other.now or self.name > other.name or self.az > other.az or self.el > other.el or self.aznow > other.aznow or self.elnow > other.elnow or self.axis > other.axis or self.tostow > other.tostow or self.elatstow > other.elatstow or self.azatstow > other.azatstow or self.slew > other.slew or self.serialport > other.serialport or self.lastSRTCom > other.lastSRTCom or self.lastSerialMsg > other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.now >= other.now or self.name >= other.name or self.az >= other.az or self.el >= other.el or self.aznow >= other.aznow or self.elnow >= other.elnow or self.axis >= other.axis or self.tostow >= other.tostow or self.elatstow >= other.elatstow or self.azatstow >= other.azatstow or self.slew >= other.slew or self.serialport >= other.serialport or self.lastSRTCom >= other.lastSRTCom or self.lastSerialMsg >= other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_AntennaStatus)

        __repr__ = __str__

    _M_SRTControl._t_AntennaStatus = IcePy.defineStruct('::SRTControl::AntennaStatus', AntennaStatus, (), (
        ('now', (), IcePy._t_string),
        ('name', (), IcePy._t_string),
        ('az', (), IcePy._t_float),
        ('el', (), IcePy._t_float),
        ('aznow', (), IcePy._t_float),
        ('elnow', (), IcePy._t_float),
        ('axis', (), IcePy._t_int),
        ('tostow', (), IcePy._t_int),
        ('elatstow', (), IcePy._t_int),
        ('azatstow', (), IcePy._t_int),
        ('slew', (), IcePy._t_int),
        ('serialport', (), IcePy._t_string),
        ('lastSRTCom', (), IcePy._t_string),
        ('lastSerialMsg', (), IcePy._t_string)
    ))

    _M_SRTControl.AntennaStatus = AntennaStatus
    del AntennaStatus

if not _M_SRTControl.__dict__.has_key('_t_anst'):
    _M_SRTControl._t_anst = IcePy.defineSequence('::SRTControl::anst', (), _M_SRTControl._t_AntennaStatus)

if not _M_SRTControl.__dict__.has_key('stamp'):
    _M_SRTControl.stamp = Ice.createTempClass()
    class stamp(object):
        def __init__(self, name='', timdate='', aznow=0.0, elnow=0.0, temperature=0.0, freq0=0.0, av=0, avc=0, nfreq=0, freqsep=0.0):
            self.name = name
            self.timdate = timdate
            self.aznow = aznow
            self.elnow = elnow
            self.temperature = temperature
            self.freq0 = freq0
            self.av = av
            self.avc = avc
            self.nfreq = nfreq
            self.freqsep = freqsep

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.name)
            _h = 5 * _h + __builtin__.hash(self.timdate)
            _h = 5 * _h + __builtin__.hash(self.aznow)
            _h = 5 * _h + __builtin__.hash(self.elnow)
            _h = 5 * _h + __builtin__.hash(self.temperature)
            _h = 5 * _h + __builtin__.hash(self.freq0)
            _h = 5 * _h + __builtin__.hash(self.av)
            _h = 5 * _h + __builtin__.hash(self.avc)
            _h = 5 * _h + __builtin__.hash(self.nfreq)
            _h = 5 * _h + __builtin__.hash(self.freqsep)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_SRTControl.stamp):
                return self.name < other.name or self.timdate < other.timdate or self.aznow < other.aznow or self.elnow < other.elnow or self.temperature < other.temperature or self.freq0 < other.freq0 or self.av < other.av or self.avc < other.avc or self.nfreq < other.nfreq or self.freqsep < other.freqsep
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_SRTControl.stamp):
                return self.name <= other.name or self.timdate <= other.timdate or self.aznow <= other.aznow or self.elnow <= other.elnow or self.temperature <= other.temperature or self.freq0 <= other.freq0 or self.av <= other.av or self.avc <= other.avc or self.nfreq <= other.nfreq or self.freqsep <= other.freqsep
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_SRTControl.stamp):
                return self.name == other.name and self.timdate == other.timdate and self.aznow == other.aznow and self.elnow == other.elnow and self.temperature == other.temperature and self.freq0 == other.freq0 and self.av == other.av and self.avc == other.avc and self.nfreq == other.nfreq and self.freqsep == other.freqsep
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_SRTControl.stamp):
                return self.name != other.name or self.timdate != other.timdate or self.aznow != other.aznow or self.elnow != other.elnow or self.temperature != other.temperature or self.freq0 != other.freq0 or self.av != other.av or self.avc != other.avc or self.nfreq != other.nfreq or self.freqsep != other.freqsep
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_SRTControl.stamp):
                return self.name > other.name or self.timdate > other.timdate or self.aznow > other.aznow or self.elnow > other.elnow or self.temperature > other.temperature or self.freq0 > other.freq0 or self.av > other.av or self.avc > other.avc or self.nfreq > other.nfreq or self.freqsep > other.freqsep
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_SRTControl.stamp):
                return self.name >= other.name or self.timdate >= other.timdate or self.aznow >= other.aznow or self.elnow >= other.elnow or self.temperature >= other.temperature or self.freq0 >= other.freq0 or self.av >= other.av or self.avc >= other.avc or self.nfreq >= other.nfreq or self.freqsep >= other.freqsep
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_stamp)

        __repr__ = __str__

    _M_SRTControl._t_stamp = IcePy.defineStruct('::SRTControl::stamp', stamp, (), (
        ('name', (), IcePy._t_string),
        ('timdate', (), IcePy._t_string),
        ('aznow', (), IcePy._t_float),
        ('elnow', (), IcePy._t_float),
        ('temperature', (), IcePy._t_float),
        ('freq0', (), IcePy._t_float),
        ('av', (), IcePy._t_int),
        ('avc', (), IcePy._t_int),
        ('nfreq', (), IcePy._t_int),
        ('freqsep', (), IcePy._t_float)
    ))

    _M_SRTControl.stamp = stamp
    del stamp

if not _M_SRTControl.__dict__.has_key('specs'):
    _M_SRTControl.specs = Ice.createTempClass()
    class specs(object):
        def __init__(self, sampleStamp=Ice._struct_marker, spec=None, avspec=None, avspecc=None, specd=None):
            if sampleStamp is Ice._struct_marker:
                self.sampleStamp = _M_SRTControl.stamp()
            else:
                self.sampleStamp = sampleStamp
            self.spec = spec
            self.avspec = avspec
            self.avspecc = avspecc
            self.specd = specd

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.sampleStamp)
            if self.spec:
                for _i0 in self.spec:
                    _h = 5 * _h + __builtin__.hash(_i0)
            if self.avspec:
                for _i1 in self.avspec:
                    _h = 5 * _h + __builtin__.hash(_i1)
            if self.avspecc:
                for _i2 in self.avspecc:
                    _h = 5 * _h + __builtin__.hash(_i2)
            if self.specd:
                for _i3 in self.specd:
                    _h = 5 * _h + __builtin__.hash(_i3)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_SRTControl.specs):
                return self.sampleStamp < other.sampleStamp or self.spec < other.spec or self.avspec < other.avspec or self.avspecc < other.avspecc or self.specd < other.specd
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_SRTControl.specs):
                return self.sampleStamp <= other.sampleStamp or self.spec <= other.spec or self.avspec <= other.avspec or self.avspecc <= other.avspecc or self.specd <= other.specd
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_SRTControl.specs):
                return self.sampleStamp == other.sampleStamp and self.spec == other.spec and self.avspec == other.avspec and self.avspecc == other.avspecc and self.specd == other.specd
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_SRTControl.specs):
                return self.sampleStamp != other.sampleStamp or self.spec != other.spec or self.avspec != other.avspec or self.avspecc != other.avspecc or self.specd != other.specd
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_SRTControl.specs):
                return self.sampleStamp > other.sampleStamp or self.spec > other.spec or self.avspec > other.avspec or self.avspecc > other.avspecc or self.specd > other.specd
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_SRTControl.specs):
                return self.sampleStamp >= other.sampleStamp or self.spec >= other.spec or self.avspec >= other.avspec or self.avspecc >= other.avspecc or self.specd >= other.specd
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_specs)

        __repr__ = __str__

    _M_SRTControl._t_specs = IcePy.defineStruct('::SRTControl::specs', specs, (), (
        ('sampleStamp', (), _M_SRTControl._t_stamp),
        ('spec', (), _M_SRTControl._t_spectrum),
        ('avspec', (), _M_SRTControl._t_spectrum),
        ('avspecc', (), _M_SRTControl._t_spectrum),
        ('specd', (), _M_SRTControl._t_spectrum)
    ))

    _M_SRTControl.specs = specs
    del specs

if not _M_SRTControl.__dict__.has_key('inuse'):
    _M_SRTControl.inuse = Ice.createTempClass()
    class inuse(object):
        def __init__(self, use=False, proc=''):
            self.use = use
            self.proc = proc

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.use)
            _h = 5 * _h + __builtin__.hash(self.proc)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_SRTControl.inuse):
                return self.use < other.use or self.proc < other.proc
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_SRTControl.inuse):
                return self.use <= other.use or self.proc <= other.proc
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_SRTControl.inuse):
                return self.use == other.use and self.proc == other.proc
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_SRTControl.inuse):
                return self.use != other.use or self.proc != other.proc
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_SRTControl.inuse):
                return self.use > other.use or self.proc > other.proc
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_SRTControl.inuse):
                return self.use >= other.use or self.proc >= other.proc
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_inuse)

        __repr__ = __str__

    _M_SRTControl._t_inuse = IcePy.defineStruct('::SRTControl::inuse', inuse, (), (
        ('use', (), IcePy._t_bool),
        ('proc', (), IcePy._t_string)
    ))

    _M_SRTControl.inuse = inuse
    del inuse

if not _M_SRTControl.__dict__.has_key('_t_spectrums'):
    _M_SRTControl._t_spectrums = IcePy.defineSequence('::SRTControl::spectrums', (), _M_SRTControl._t_specs)

if not _M_SRTControl.__dict__.has_key('telescope'):
    _M_SRTControl.telescope = Ice.createTempClass()
    class telescope(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_SRTControl.telescope:
                raise RuntimeError('SRTControl.telescope is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SRTControl::telescope')

        def ice_id(self, current=None):
            return '::SRTControl::telescope'

        def ice_staticId():
            return '::SRTControl::telescope'
        ice_staticId = staticmethod(ice_staticId)

        def message(self, s, current=None):
            pass

        def SRTGetSerialPorts(self, current=None):
            pass

        def SRTSetSerialPort(self, s, current=None):
            pass

        def SRTinit(self, s, current=None):
            pass

        def SRTStow(self, current=None):
            pass

        def SRTStatus(self, current=None):
            pass

        def SRTAzEl(self, az, el, current=None):
            pass

        def SRTStopSlew(self, current=None):
            pass

        def SRTThreads(self, current=None):
            pass

        def serverState(self, current=None):
            pass

        def SRTSetFreq(self, freq, receiver, current=None):
            pass

        def SRTGetSpectrum(self, current=None):
            pass

        def SRTDoCalibration(self, method, current=None):
            pass

        def SRTGetName(self, current=None):
            pass

        def SRTClear(self, current=None):
            pass

        def SRTsetMode(self, mode, current=None):
            pass

        def SRTOnTarget(self, current=None):
            pass

        def SRTportInUse(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_telescope)

        __repr__ = __str__

    _M_SRTControl.telescopePrx = Ice.createTempClass()
    class telescopePrx(Ice.ObjectPrx):

        def message(self, s, _ctx=None):
            return _M_SRTControl.telescope._op_message.invoke(self, ((s, ), _ctx))

        def begin_message(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_message.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_message(self, _r):
            return _M_SRTControl.telescope._op_message.end(self, _r)

        def SRTGetSerialPorts(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetSerialPorts.invoke(self, ((), _ctx))

        def begin_SRTGetSerialPorts(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetSerialPorts.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTGetSerialPorts(self, _r):
            return _M_SRTControl.telescope._op_SRTGetSerialPorts.end(self, _r)

        def SRTSetSerialPort(self, s, _ctx=None):
            return _M_SRTControl.telescope._op_SRTSetSerialPort.invoke(self, ((s, ), _ctx))

        def begin_SRTSetSerialPort(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTSetSerialPort.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_SRTSetSerialPort(self, _r):
            return _M_SRTControl.telescope._op_SRTSetSerialPort.end(self, _r)

        def SRTinit(self, s, _ctx=None):
            return _M_SRTControl.telescope._op_SRTinit.invoke(self, ((s, ), _ctx))

        def begin_SRTinit(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTinit.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_SRTinit(self, _r):
            return _M_SRTControl.telescope._op_SRTinit.end(self, _r)

        def SRTStow(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStow.invoke(self, ((), _ctx))

        def begin_SRTStow(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStow.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTStow(self, _r):
            return _M_SRTControl.telescope._op_SRTStow.end(self, _r)

        def SRTStatus(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStatus.invoke(self, ((), _ctx))

        def begin_SRTStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTStatus(self, _r):
            return _M_SRTControl.telescope._op_SRTStatus.end(self, _r)

        def SRTAzEl(self, az, el, _ctx=None):
            return _M_SRTControl.telescope._op_SRTAzEl.invoke(self, ((az, el), _ctx))

        def begin_SRTAzEl(self, az, el, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTAzEl.begin(self, ((az, el), _response, _ex, _sent, _ctx))

        def end_SRTAzEl(self, _r):
            return _M_SRTControl.telescope._op_SRTAzEl.end(self, _r)

        def SRTStopSlew(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStopSlew.invoke(self, ((), _ctx))

        def begin_SRTStopSlew(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStopSlew.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTStopSlew(self, _r):
            return _M_SRTControl.telescope._op_SRTStopSlew.end(self, _r)

        def SRTThreads(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTThreads.invoke(self, ((), _ctx))

        def begin_SRTThreads(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTThreads.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTThreads(self, _r):
            return _M_SRTControl.telescope._op_SRTThreads.end(self, _r)

        def serverState(self, _ctx=None):
            return _M_SRTControl.telescope._op_serverState.invoke(self, ((), _ctx))

        def begin_serverState(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_serverState.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_serverState(self, _r):
            return _M_SRTControl.telescope._op_serverState.end(self, _r)

        def SRTSetFreq(self, freq, receiver, _ctx=None):
            return _M_SRTControl.telescope._op_SRTSetFreq.invoke(self, ((freq, receiver), _ctx))

        def begin_SRTSetFreq(self, freq, receiver, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTSetFreq.begin(self, ((freq, receiver), _response, _ex, _sent, _ctx))

        def end_SRTSetFreq(self, _r):
            return _M_SRTControl.telescope._op_SRTSetFreq.end(self, _r)

        def SRTGetSpectrum(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetSpectrum.invoke(self, ((), _ctx))

        def begin_SRTGetSpectrum(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetSpectrum.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTGetSpectrum(self, _r):
            return _M_SRTControl.telescope._op_SRTGetSpectrum.end(self, _r)

        def SRTDoCalibration(self, method, _ctx=None):
            return _M_SRTControl.telescope._op_SRTDoCalibration.invoke(self, ((method, ), _ctx))

        def begin_SRTDoCalibration(self, method, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTDoCalibration.begin(self, ((method, ), _response, _ex, _sent, _ctx))

        def end_SRTDoCalibration(self, _r):
            return _M_SRTControl.telescope._op_SRTDoCalibration.end(self, _r)

        def SRTGetName(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetName.invoke(self, ((), _ctx))

        def begin_SRTGetName(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetName.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTGetName(self, _r):
            return _M_SRTControl.telescope._op_SRTGetName.end(self, _r)

        def SRTClear(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTClear.invoke(self, ((), _ctx))

        def begin_SRTClear(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTClear.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTClear(self, _r):
            return _M_SRTControl.telescope._op_SRTClear.end(self, _r)

        def SRTsetMode(self, mode, _ctx=None):
            return _M_SRTControl.telescope._op_SRTsetMode.invoke(self, ((mode, ), _ctx))

        def begin_SRTsetMode(self, mode, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTsetMode.begin(self, ((mode, ), _response, _ex, _sent, _ctx))

        def end_SRTsetMode(self, _r):
            return _M_SRTControl.telescope._op_SRTsetMode.end(self, _r)

        def SRTOnTarget(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTOnTarget.invoke(self, ((), _ctx))

        def begin_SRTOnTarget(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTOnTarget.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTOnTarget(self, _r):
            return _M_SRTControl.telescope._op_SRTOnTarget.end(self, _r)

        def SRTportInUse(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTportInUse.invoke(self, ((), _ctx))

        def begin_SRTportInUse(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTportInUse.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTportInUse(self, _r):
            return _M_SRTControl.telescope._op_SRTportInUse.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_SRTControl.telescopePrx.ice_checkedCast(proxy, '::SRTControl::telescope', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_SRTControl.telescopePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_SRTControl._t_telescopePrx = IcePy.defineProxy('::SRTControl::telescope', telescopePrx)

    _M_SRTControl._t_telescope = IcePy.defineClass('::SRTControl::telescope', telescope, (), True, None, (), ())
    telescope._ice_type = _M_SRTControl._t_telescope

    telescope._op_message = IcePy.Operation('message', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTGetSerialPorts = IcePy.Operation('SRTGetSerialPorts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), _M_SRTControl._t_ports),), None, ())
    telescope._op_SRTSetSerialPort = IcePy.Operation('SRTSetSerialPort', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTinit = IcePy.Operation('SRTinit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTStow = IcePy.Operation('SRTStow', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTStatus = IcePy.Operation('SRTStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), _M_SRTControl._t_AntennaStatus),), None, ())
    telescope._op_SRTAzEl = IcePy.Operation('SRTAzEl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_float), ((), IcePy._t_float)), (((), IcePy._t_string),), None, ())
    telescope._op_SRTStopSlew = IcePy.Operation('SRTStopSlew', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTThreads = IcePy.Operation('SRTThreads', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_serverState = IcePy.Operation('serverState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTSetFreq = IcePy.Operation('SRTSetFreq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_float), ((), IcePy._t_string)), (((), IcePy._t_string),), None, ())
    telescope._op_SRTGetSpectrum = IcePy.Operation('SRTGetSpectrum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), _M_SRTControl._t_specs),), None, ())
    telescope._op_SRTDoCalibration = IcePy.Operation('SRTDoCalibration', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_float),), None, ())
    telescope._op_SRTGetName = IcePy.Operation('SRTGetName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTClear = IcePy.Operation('SRTClear', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTsetMode = IcePy.Operation('SRTsetMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTOnTarget = IcePy.Operation('SRTOnTarget', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTportInUse = IcePy.Operation('SRTportInUse', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), _M_SRTControl._t_inuse),), None, ())

    _M_SRTControl.telescope = telescope
    del telescope

    _M_SRTControl.telescopePrx = telescopePrx
    del telescopePrx

# End of module SRTControl
